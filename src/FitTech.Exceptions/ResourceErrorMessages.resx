<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EMPLOYEE_CPF_IN_USE" xml:space="preserve">
    <value>An employee is already using this CPF.</value>
  </data>
  <data name="EMPLOYEE_EMAIL_IN_USE" xml:space="preserve">
    <value>An employee is already using this e-mail.</value>
  </data>
  <data name="EMPTY_ADDRESS" xml:space="preserve">
    <value>The property Address cannot be empty.</value>
  </data>
  <data name="EMPTY_CITY" xml:space="preserve">
    <value>The property City cannot be empty.</value>
  </data>
  <data name="EMPTY_COUNTRY" xml:space="preserve">
    <value>The property Country cannot be empty.</value>
  </data>
  <data name="EMPTY_CPF" xml:space="preserve">
    <value>The property Cpf cannot be empty.</value>
  </data>
  <data name="EMPTY_EMAIL" xml:space="preserve">
    <value>The property EmailAddress cannot be empty.</value>
  </data>
  <data name="EMPTY_EMPLOYEE_TYPE" xml:space="preserve">
    <value>The property EmployeeType cannot be empty.</value>
  </data>
  <data name="EMPTY_GYM_ID" xml:space="preserve">
    <value>The property GymId cannot be empty.</value>
  </data>
  <data name="EMPTY_NAME" xml:space="preserve">
    <value>The property Name cannot be empty.</value>
  </data>
  <data name="EMPTY_NUMBER" xml:space="preserve">
    <value>The property Number cannot be empty.</value>
  </data>
  <data name="EMPTY_PASSWORD" xml:space="preserve">
    <value>The property Password cannot be empty.</value>
  </data>
  <data name="EMPTY_PHONE_NUMBER" xml:space="preserve">
    <value>The property PhoneNumber cannot be empty.</value>
  </data>
  <data name="EMPTY_POSTAL_CODE" xml:space="preserve">
    <value>The property PostalCode cannot be empty.</value>
  </data>
  <data name="EMPTY_SALARY" xml:space="preserve">
    <value>The property Salary cannot be empty.</value>
  </data>
  <data name="EMPTY_STATE" xml:space="preserve">
    <value>The property State cannot be empty.</value>
  </data>
  <data name="EMPTY_STREET" xml:space="preserve">
    <value>The property Street cannot be empty.</value>
  </data>
  <data name="EMPTY_USER_TYPE" xml:space="preserve">
    <value>The property UserType cannot be empty.</value>
  </data>
  <data name="EXPIRED_TOKEN" xml:space="preserve">
    <value>This token is expired, please log in again.</value>
  </data>
  <data name="GYM_EMAIL_IN_USE" xml:space="preserve">
    <value>A gym is already using this e-mail.</value>
  </data>
  <data name="GYM_NAME_IN_USE" xml:space="preserve">
    <value>A gym is already using this name.</value>
  </data>
  <data name="GYM_NOT_FOUND" xml:space="preserve">
    <value>Não existe nenhuma academia com o Id informado.</value>
  </data>
  <data name="INVALID_CPF" xml:space="preserve">
    <value>This CPF is not valid, make sure it has been entered correctly, it must follow the pattern XXX.XXX.XXX-XX</value>
  </data>
  <data name="INVALID_CURRENT_PASSWORD" xml:space="preserve">
    <value>The current password is invalid.</value>
  </data>
  <data name="INVALID_EMAIL" xml:space="preserve">
    <value>This e-mail is not valid.</value>
  </data>
  <data name="INVALID_LOGIN" xml:space="preserve">
    <value>The email and/or password entered are incorrect.</value>
  </data>
  <data name="INVALID_PASSWORD" xml:space="preserve">
    <value>This password is not valid, it must be at least 6 characters long.</value>
  </data>
  <data name="INVALID_PHONE_NUMBER" xml:space="preserve">
    <value>This phone number is not valid, it must follow the pattern (XX) X XXXX-XXXX.</value>
  </data>
  <data name="INVALID_POSTAL_CODE" xml:space="preserve">
    <value>This postal code is not valid, it must follow the pattern XXXXX-XXX.</value>
  </data>
  <data name="INVALID_STATE" xml:space="preserve">
    <value>In the State property, only the state acronym must be entered. Exemple: SP.</value>
  </data>
  <data name="STUDENT_CPF_IN_USE" xml:space="preserve">
    <value>A student is already using this CPF.</value>
  </data>
  <data name="STUDENT_EMAIL_IN_USE" xml:space="preserve">
    <value>A student is already using this e-mail.</value>
  </data>
  <data name="UNKNOW_ERROR" xml:space="preserve">
    <value>Unknow error.</value>
  </data>
  <data name="USER_WITHOUT_PERMISSION" xml:space="preserve">
    <value>User without permission for this resource.</value>
  </data>
</root>